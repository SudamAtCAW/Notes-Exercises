Cypress Important Topics
Understand the Framework
Understand the folder structure 
where the environment variables are getting saved
purpose of
index.js
plugins.js
supports.js
fixtures
Understand the folder structure and environment configuration.ts


How Cypress is different from selenium:
Cypress gives us completes framework., Faster than selenium, More stable, Cypress can test and mock APIs.It doesn't 
need test environments.
It doesn't support IE and Safari.
Asynchronous code
No Mobile but Mobile view
Single domain and single tab
Not friendly with iframes.

Preparaing Developement Environment:
Install Chrome browser, Node.js, Git, IDE(VS code)

Clone the Application from the Repo:

Open a new floder for storing the project in it. Open that folder in cmd and run the command "git clone url" to clone the
 repo in your local system.
After cloning open that folder in Vs code and in terminal run "npm install" which will look into the dev dependencies
of package.json file and will download all the required dependencies
To start the application run the command "npm start"
After executing this command you can run the cloned application on your local port 4200

Cypress Installation:

In the terminal run the command "npm install cypress --save-dev" which will save cypress as a dev dependency in the 
package.json file

Open the cypress by running the command "npx cypress open"

Difference between npm and npx

npm is used to download javaScript packages from Node Package Manager , we can run applications locally by npm start.
by adding a command and key in the scripts block of package.json file

npx is used to execute javaScript packages downloaded by npm.

Folder Structure:
Whenever we open Cypress for the first time it will create a cypress folder in the root of our project
Under cypress we will get 3 other folders. e2e, fixtures and support

Under support we have commands and e2e file, 
e2e is the very first file that is executed by cypress, when cypress is initilized. Here we can import commands ,
event listeners, and custom packages.
in commands.js we will store our custom commands

Fixtures folder:
It represents the place where we can store our json files. it can be used when we are working with the apis

e2e:
In this folder we store our tests.

cypress.config.js:
This is the place where we configure the behaviour of the framework, different parameters.

Cypress Configuration:

In will be only done in cypress.config.js
here we can define our base url or local host port address.
Spec Pattern:
Cypress follows the cy.js or cy.ts pattern. We will be using a traditional naming convention spec.js
In the specPattern key we can add this value specPattern: "cypress/e2e/**/*.{js,jsx,ts,tsx,feature}"
In the begining of the brackets we can remove cy from it which is shown in the cypress configuration documentation
Now we can include any spec pattern.

excludeSpecPattern:

excludeSpecPattern: ['**/1-getting-started/*', '**/2-advanced-examples/*']

it will ignore the specified files and only show our test cases.

View Port:
view port will control the resolution of the screen of cypress

In e2e folder we can create tests with the name of test.spec.js or test.cy.js and it is only possible because of 
the spec pattern declared in the cypress.config.js
                                                  
Cypress 9 vs Cypress 10:
The integration folder in cy9 has been changed to e2e in cy10   
The index.js file under support folder in cy9 has been changed to e2e.js. bUt  The function still remains the same.
The plugins folder in cy9 doesn't exist in cy10
In cy9 there was a examples folder which contained some demo test cases.In cy10 the demo tests are under e2e folder
In cy9 the name of the config file was cypress.json but in cy10 it is cypress.config.js
The base URL and is moved inside the e2e block in cy10
View port is like a global config(not only for e2e for all i.e unit testing and e2e), that is why it is out side of the
the e2e block

Cypress removed the plugins folder that had index.js in it.
in that index.js we had one function module.exports which took two parameters on and config. Inside of this function
we can add our plugins.

module.exports  = (on, config) =>{

//initialPlugin(on, config);
//on("task", pearcyHealthCheck);
//return config;
}

In cy10 those settings moved to cypress.config.js Inside et2e block we need to create setupNodeEvents

setupNodeEvents(on, config) =>{
//initialPlugin(on, config);
//on("task", pearcyHealthCheck);
//return config;
}

Inside of the setupNodeEvents we can put all those settings that we were putting in index.js of plugins folder

In cy9 we could all the test by clicking a single button but in cy10 they have removed that button

DOM Terminology:

HTML DOM consists of HTMLtags, HTML Attributes and Attribute Values
HTML Tag Names:
div comes with opeening tag and closing tag
input comes with self closing tag

HTML Attributes Names 
Atributes can be found inside tags, usually they are in red colour.Some tag have some value and some doesn't
Some tag names are
data-cy
id
nbinput
placeholder
type

id and class are also html attribute names, they have a special role in html structure
class can have multiple values and separated by a space
HTML Tag Values:
They are assigned to attribute names. 

TABLE:
<tbody role> </tbody>
they ahve rows <tr> </tr>
rows have columns like <td> </td>
The values in between angle braces (>here<) is plain text values for that column. It is not visible all of the time.
If there are 3 dots in between angle braces that means it has some nested contents inside it

Relation between the web elements:
All elements located above our key element is parent element, 
All elements which are inside eour key element is child element

Sibling Element:
The elements whcih are aat the same stage as the key element is in.

Test Structure:
Every test will start with describe("abc") or context("abc").
In describe block we can add some description about our test, and then open a call back function with a body
In that body we will create a it block which will contain a description about the test. Again it will have a call 
back function with a body.
 We can add as many tests as we want in the describe block.
We can also create multiple describe blocks. We can also put describe inside another describe block.
describe('Test Scenario', () => {

  it('test case desc', () => {
    //repetative code(log in)
  });
});

beforeEach("abc", () =>{

}):
It is the code for every task. Inside the before each we can put some repeatative code ewquired for each test like 
log in function. By the help of this we don't need to copy and past the same code for each of the it blocks.
The beforeEach can only work insdie the describe block.

Types of Locators:
While writing our tests on the top of our code we can mention reference type as cypress. bY which vs code will support
and tell us the cypress methods.
Cypress uses the JQuerry selector engine. Knowing it will bw helpful in cypress.
Cypress doesn't have the xpath.

/// <reference types="cypress" />

A cypress statement always starts with cy

cy.visit("/")  // we can mention / as our base url when we are running the application on local host
      .contains("Forms")
      .click()
      .get(".menu-title")
      .contains("Form Layouts")
      .click()

      //By Tag Name, we dont need to specify any additional data to tell cypress that it is tag name
      .get("input")

      //By Id, while getting an element by id we have to add it with a # symbol ("#inputEmail")
      .get("#inputEmail")

      //By Class name, we have add a . (dot) in front of the class name
      .get(".input-full-width")

      //By Attribute name, we have to specify the attribute name inside square braces with in quotes
      .get("[placeholder]")

      //By Attributr name and value, same as attribute name, only the attribute value will be within double quotes
      .get('[placeholder="Email"]')

      //By Class value, here we have to provide the class name and value with in square brackets within doible quotes
      .get('[class="input-full-width size-medium shape-rectangle"]')

      //By Tag name and Attribute with value, make sure the inside and outside bracket quotes are different from each other
      .get('input[placeholder="Email"]') // give the tag name and attribute and value within quotes inside square brackets.

      //By two different attributes, just and each of the attributes in one square bracket
      .get('[placeholder="Email"][type="email"]')

      //By tag name, Attribute with value, ID and class name, add each of the elements respective data which is needed for
cypress to identify them
      .get('input[placeholder="Email"]#inputEmail.input-full-width')

      //The most recomended way, create your own attribute by adding it in the source code. 
When you mention your data locator no dev will change it.
      .get('[data-cy="imputEmail1"]');


While getting an element alwas use cy.contains or custom locatiors, 
While using text locators always look inti the dom for better understaiding. if it found multiple attributes

When we use cy.contains it will get the first match that it finds on the web page. 
We can provide more than one parameter to get the exact match of the desired element.
 cy.contains('[status="warning"]','Sign in').click()
Here we are telling sypress that find the web element that contains attribute "status" with value "warning" and then 
which contains Sign In

If a button doesn't contain any unique identifiers then try to find Unique identifiers in that section or parent element

cy.get('#inputEmail3') //getting an element by id
      .parents('form')  //travelling up by parent command
      .find('button') //finding the button
      .should('contain','Sign in')  //asserting the button

First find any element which has an Id. Then travel up by parents command and use find command to locate the button.
You can also add assertions in that button.

Find command is to only find child elements inside parent elements.
parents method is to locate parents element from the current element which you are in .

We can also use the find method to find an element which doesn't have any unique identifiers.

Saving The Subject of the Command: (Then and wrap methods)

     //cy.contains('nb-card','Using the Grid').find('[for="inputEmail1"]').should('contain','Email')
    // cy.contains('nb-card','Using the Grid').find('[for="inputPassword2"]').should('contain','Password')
    // cy.contains('nb-card','Basic form').find('[for="exampleInputEmail1"]').should('contain','Email address')
    // cy.contains('nb-card','Basic form').find('[for="exampleInputPassword1"]').should('contain','Password')

The issue with above written code is , it is repetative,

The selenium Way
const firstForm = cy.contains('nb-card','Using the Grid') //storing the web element in a variable
const secondForm = cy.contains('nb-card','Basic form') //storing the web element in a variable

finding the web elements:
firstForm.find('[for="inputEmail1"]').should('contain','Email')
firstForm.find('[for="inputPassword2"]').should('contain','Password')
secondForm.find('[for="exampleInputEmail1"]').should('contain','Email address')

the above code won't be working in cypress because javascript is asynchronous, we can not save the context/object/result of the 
command.

Cypress Style:
